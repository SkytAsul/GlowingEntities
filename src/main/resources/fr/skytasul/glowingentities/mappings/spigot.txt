# reflection-remapper | 1.17.0
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> setCollisionRule
    setColor(net.minecraft.ChatFormatting) -> setColor
net.minecraft.network.protocol.game.ClientboundRemoveEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> Y
    SHULKER -> ay
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> k
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> get
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> a
    send(net.minecraft.network.protocol.Packet) -> sendPacket
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> getDataWatcher
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.17.1
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> setCollisionRule
    setColor(net.minecraft.ChatFormatting) -> setColor
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> Y
    SHULKER -> ay
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> k
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> get
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> a
    send(net.minecraft.network.protocol.Packet) -> sendPacket
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> getDataWatcher
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.18.0
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> Y
    SHULKER -> ay
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> k
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> a
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> aa
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.18.1
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> Y
    SHULKER -> ay
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> k
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> a
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> aa
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.18.2
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> Y
    SHULKER -> ay
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> a
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.19.0
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> ab
    SHULKER -> aB
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> b
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.19.1
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> ab
    SHULKER -> aB
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> b
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.19.2
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> ab
    SHULKER -> aB
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> b
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
    getAccessor() -> a
    getValue() -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> ai
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> a
    packedItems -> b
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.19.3
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> ac
    SHULKER -> aC
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$b:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> b
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> Z
    getEntityData() -> al
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> b
    packedItems -> c
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.19.4
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> am
    SHULKER -> aG
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$b:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> a
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> b
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> h
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> an
    getEntityData() -> aj
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> b
    packedItems -> c
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.20.1
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> am
    SHULKER -> aG
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> m
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$b:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> a
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> b
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> net.minecraft.server.network.PlayerConnection:
    connection -> h
    send(net.minecraft.network.protocol.Packet) -> a
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> an
    getEntityData() -> aj
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> b
    packedItems -> c
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.20.2
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> am
    SHULKER -> aG
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> c
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$b:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> a
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> b
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> ao
    getEntityData() -> al
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> b
    packedItems -> c
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.20.4
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> an
    SHULKER -> aH
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> c
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$b:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> a
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> b
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> ao
    getEntityData() -> an
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> b
    packedItems -> c
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.20.6
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aq
    SHULKER -> aK
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> ap
    getEntityData() -> ap
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.0
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aq
    SHULKER -> aK
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> ap
    getEntityData() -> ar
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.1
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aq
    SHULKER -> aK
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> c
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> ap
    getEntityData() -> ar
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.3
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aD
    SHULKER -> bc
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> f
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> am
    getEntityData() -> au
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.4
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aC
    SHULKER -> bb
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> f
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> am
    getEntityData() -> au
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.5
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aD
    SHULKER -> bd
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> f
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> am
    getEntityData() -> ar
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.6
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aE
    SHULKER -> be
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> g
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> az
    getEntityData() -> au
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.7
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aE
    SHULKER -> be
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> g
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> az
    getEntityData() -> au
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.8
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aE
    SHULKER -> be
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> g
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> az
    getEntityData() -> au
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
# reflection-remapper | 1.21.9
net.minecraft.world.entity.EntityType -> net.minecraft.world.entity.EntityTypes:
    MARKER -> aH
    SHULKER -> bh
net.minecraft.network.Connection -> net.minecraft.network.NetworkManager:
    channel -> n
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam:
net.minecraft.server.network.ServerCommonPacketListenerImpl -> net.minecraft.server.network.ServerCommonPacketListenerImpl:
    connection -> e
    send(net.minecraft.network.protocol.Packet) -> b
net.minecraft.network.syncher.SynchedEntityData$DataValue -> net.minecraft.network.syncher.DataWatcher$c:
    create(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    id() -> a
    serializer() -> b
    value() -> c
net.minecraft.server.level.ServerPlayer -> net.minecraft.server.level.EntityPlayer:
    connection -> g
net.minecraft.world.scores.Team$CollisionRule -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush:
    NEVER -> b
net.minecraft.ChatFormatting -> net.minecraft.EnumChatFormat:
    getByCode(char) -> a
net.minecraft.network.syncher.EntityDataSerializer -> net.minecraft.network.syncher.DataWatcherSerializer:
    createAccessor(int) -> a
net.minecraft.network.syncher.SynchedEntityData$Builder -> net.minecraft.network.syncher.DataWatcher$a:
    itemsById -> b
    build() -> a
net.minecraft.network.syncher.SyncedDataHolder -> net.minecraft.network.syncher.SyncedDataHolder:
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy:
net.minecraft.world.scores.PlayerTeam -> net.minecraft.world.scores.ScoreboardTeam:
    setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    setColor(net.minecraft.ChatFormatting) -> a
net.minecraft.network.syncher.EntityDataAccessor -> net.minecraft.network.syncher.DataWatcherObject:
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity:
net.minecraft.network.protocol.BundlePacket -> net.minecraft.network.protocol.BundlePacket:
    subPackets() -> b
net.minecraft.network.syncher.SynchedEntityData -> net.minecraft.network.syncher.DataWatcher:
    get(net.minecraft.network.syncher.EntityDataAccessor) -> a
net.minecraft.world.scores.Scoreboard -> net.minecraft.world.scores.Scoreboard:
net.minecraft.network.syncher.SynchedEntityData$DataItem -> net.minecraft.network.syncher.DataWatcher$Item:
net.minecraft.world.entity.Entity -> net.minecraft.world.entity.Entity:
    DATA_SHARED_FLAGS_ID -> aA
    getEntityData() -> aC
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata:
    id -> c
    packedItems -> d
net.minecraft.world.phys.Vec3 -> net.minecraft.world.phys.Vec3D:
net.minecraft.world.entity.Marker -> net.minecraft.world.entity.Marker:
net.minecraft.network.protocol.Packet -> net.minecraft.network.protocol.Packet:
net.minecraft.world.level.Level -> net.minecraft.world.level.World:
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b:
